#!groovy
library('sima-jenkins-lib')

def main() {
  def job_name = env.JOB_NAME.split('/')[1]

  properties([
      parameters([
          booleanParam(
              name: 'SKIP_DOWNSTREAM_BUILDS',
              description: 'Skips building upstream jobs',
              defaultValue: false
          ),
          booleanParam(
              name: "PACKAGE_ONLY",
              defaultValue: false,
              description: 'Only package don\'t run tests'
          )
      ]),
  ])

  node("docker") {
    stage("Checkout") {
      utils.checkoutBitbucket()
      utils.setBuildMetadataFromVersionIn("python/VERSION.in")
    }

    def image
    stage("DockerBuild") {
      image = utils.dockerBuild(
          "docker/Dockerfile",
          "${env.NEXUS_URL}:5000/" + job_name,
          "jenkins_user",
          "docker_build.log", 
          {},
          "https://${env.NEXUS_URL}:5000"
      )
    }

    parallel push: {
      stage("DockerPush") {
        image['post']()
      }
    }, build: {
      image["image"].inside("-m 32g -c 8") {
        utils.cmakeBuild("build", "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache", {}, { src_dir ->
          stage("Python Bindings") {
            dir("${env.WORKSPACE}/python") {
              utils.setPythonBuildEnv([], {
                sh """#!/bin/bash -ex
rm -rf dist build
python3 setup.py bdist_wheel
"""
              }, 'sima')
            }
            dir("${env.WORKSPACE}/topi/python") {
              utils.setPythonBuildEnv([], {
                sh """#!/bin/bash -ex
rm -rf dist build
python3 setup.py bdist_wheel
"""
              }, 'sima')
            }
          }
        }, "../sima-regres.cmake", "clean all")
        stage("Package") {
          tvm_pkg_dir = "python/dist/*.whl"
          archiveArtifacts(tvm_pkg_dir)
          utils.uploadPythonPackages('jenkins_user', 'sima-pypi', tvm_pkg_dir, 3)
          topi_pkg_dir = "topi/python/dist/*.whl"
          archiveArtifacts(topi_pkg_dir)
          utils.uploadPythonPackages('jenkins_user', 'sima-pypi', topi_pkg_dir, 3)
        }
      }
    }

    stage("Promotion") {
      if (env.BRANCH_NAME=="sima") {
        utils.docker_promote(image['image'], 'jenkins_user', "https://${env.NEXUS_URL}:5000")
      }
    }

  }

  stage("Upstream") {
    parallel n2a: {
      utils.buildUpstream("n2a_compiler", params.SKIP_DOWNSTREAM_BUILDS, [
          booleanParam(name: 'PACKAGE_ONLY', value: params.PACKAGE_ONLY)
      ])
    }, psim_mla_flow: {
      utils.buildUpstream("psim_mla_flow", params.SKIP_UPSTREAM_BUILDS, [])
    }
  }
}

utils.job_wrapper( {
  main()
})

return this
